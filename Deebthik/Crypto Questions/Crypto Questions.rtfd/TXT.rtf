{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Consolas;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue0;
\red255\green255\blue255;\red38\green38\blue38;\red245\green245\blue245;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c100000\c100000\c100000;\csgray\c0;
\csgray\c100000;\cssrgb\c20000\c20000\c20000;\cssrgb\c96863\c96863\c96863;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c87059;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww23180\viewh11100\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 Crypto Questions:\
\
1. Title: Bob\'92s your UNCLE!\
\
Bob receives an anonymous message. The message was titled \'91Bob\'92s your UNCLE(1863)!\'92 and contained this in the body of the message:\
\
\'92n: \cf2 \cb3 \expnd0\expndtw0\kerning0
Y42S608503G58871L38JXQD72O3J7380145U2R4466CP7E213ZPG280LHY50033117P203HL64G3494066W149S2D40Q4I166VSG5MJ905VR4767E006MG27W8161N6272978382ELH047XN8338D48OI37W0R64321162HN3E2WP0H06O69387G655UP1722HL9HUN37FQ0F183X8NC34NE367X28O4H62165Q520GVN2G8N94426FZNH77MF7X2901PF28Q1I71X2R10CPF37394USEP8H84153URD4231845932OE46Y15201O8F8979P3I9U33Q83D1099M075H2U6OGM8HX75P2CP7JWQ7E4966NF3213V7172821O867566534206D766QF966857UPGLHYO60E2P06EU6Q6428257H3O2G219V9R7H085LJU3653165N08C040276LH7V23NGN818187095IV95NE248NI2860U9S0G1Q2188\cf0 \cb1 \kerning1\expnd0\expndtw0 \
\
p+q:\
\pard\pardeftab720\sl240\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
1Y42421829783R486F8P275J66538660U842R1C3LG3471UP21C311QH044358X0077772OG2O669938H9882WP550F6NG9WN5E96O09F66U7R25HMF23325111914595XPD501354Q3GY80471029355168P037351G5177M12I8Y8229292S30F854240N8G1UN006CLH45X8P264613151942GNIW4QE3O8I2W584O9150D04L81I6WPHL5E75\cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
e: 65537\'92\
\
The modulus and p+q are encrypted. Find out the encryption used and decrypt it accordingly. Upon decryption, the modulus and p+q will still be missing a bit of information. Find out the private key and decipher the ciphertext to obtain the flag.\
\
\
\
Solution:\
\
n and p+q are encrypted using Vigenere cipher, as hinted with the date 1963 which was the year it was first cracked. The shift key is the word UNCLE which is all in caps giving a conspicuous hint of sorts. Then m and p+q are decoded using the key and upon decryption, a hex is obtained. It is then converted to decimal and bit needs to be added to it to obtain the actual n and p+q. Now we have n=pq and p+q, using this we find p and q separately and the private key is constructed and the ciphertext is decrypted to obtain the flag.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \cb5 \CocoaLigature0 p:00ff971d6551423ae9cdfc01b344945288d6ac62d95c4bfd58198bc2cadf68643bb521c15808f7817c38de6efa6e4c58c24aca7ca71a7f67885fe32e5bcd01880b1e1985a58ae9f4c1572151802ea412523c170cc4e38cdde14a839be66db0ba4c04c747ad4911aec8b5fdedbe7e6df5765eaa41586b7fcd233f311f582857707f\
\
q:00e48d041d4641a99d0ae6744320a41381ad81b76166fb1d6a00a55d0564cd28c4c2556a8acd7212115fa45d5a9f20710811cc53f44c287ad75b4003f5448fbd8abe9b7b8fc452f34319e141d4e7e7f12115ce0ab62f5c0a41480f57271791867cbce2b8bd643429f9ae63439315c0d94e7d934cd3eccbc42d7119628ea4a2e9f7\
\
d:\
0682cb904012369877804d6542a742d66ebe3bffbba652d9cc0647e23781b4f59ba5ef931f78eb0829666e83bc5b8b70dc57ffabd55c1e91794b37e732b05ec45c5cb265f2ff8a6d53bd3479affa04371bae9f526f1e83cad8745e263e861e6af1ad390ddd3416fc9a1c11318be87a56df87086fbc25d35a2d1402bf0974b326cb4a3ff19936a7912de86800c06ff9cd731bd734f20a22452b70f82a666862ffe1bafbafbbbcc28edc63bf28544da032bd4f211fb9476a412b56215c55e07e1b863520b34ea8b36ba03f29d3a5b361f8c67685630449f43a7db1e26888c00989ac88a7357c612a19a3371db9d9dc5ef2df0eddb3b93e9e34e3820b5ea68d3419\cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\
\
\
\
\
\
\
2. Title: Ground Control - Major Tom\
\
Stacy, an employee at NASA has encrypted the following message with an unknown key, with AES-128-CBC:\
\
Original: Ground Control - Minor Bob\
\
Encrypted: \cf4 \cb5 \CocoaLigature0 114fa4e813e1157a776721d960547e21f1d333a493b34669be3b7bc36a4c15a3\
\
She then realizes that she mistyped the message. The correct message to be typed was \'93Ground Control - Major Tom\'94. She has forgotten the key but the receiving end\'92s key is still intact, so all she has to do now is somehow figure out how to change the ciphertext so that when decrypted, its reads the correct message. Help her out.\
\
\
\
Solution:\
Since this task involved CBC mode of operation for the block cipher, we first hexdump the given ciphertext.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs36 \cf4 G r  o u  n d    C  o n  t r  o l    -\
114f a4e8 13e1 157a 7767 21d9 6054 7e21\
M i  n o  r    B o  B\
f1d3 33a4 93b3 4669 be3b 7bc3 6a4c 15a3
\f0\fs48 \
\
Then, we write a program(I wrote a Python program in my case) to generate a new hex line just for the part that has to be changed in the ciphertext.\

\f1\fs36 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 \
def mod_block(plaintext, mod, prev_block):\
    diff = [ord(a) ^ ord(b) for a, b in zip(plaintext[:16], mod[:16])]\
    return ''.join(["%0.2x" % (int(prev_block[i*2:i*2+2], 16) ^ diff[i]) for i in range(16)])\
\
plaintext = raw_input("Enter the known plaintext: ")\
mod = raw_input("Enter the desired plaintext: ")\
prev_block = raw_input("Enter the ciphertext of the previous block: ")\
\
print mod_block(plaintext, mod, prev_block)\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf4 This Python program gives you a new hex line which then has to inserted into the original hexdump using the dd command. The new ciphertext when decrypted will give you the modified plaintext(there is no way of checking it tho). The flag is the value the function in Python returns, i.e., the new line in hex.\
\
\
3. Title: Quite an EC task\
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
M = 93556643250795678718734474880013829509320385402690660619699653921022012489089\
A = 66001598144012865876674115570268990806314506711104521036747533612798434904785\
B = ?\
\
P = (56027910981442853390816693056740903416379421186644480759538594137486160388926, 65533262933617146434438829354623658858649726233622196512439589744498050226926)\
\
Q = (61124499720410964164289905006830679547191538609778446060514645905829507254103, 2595146854028317060979753545310334521407008629091560515441729386088057610440)\
\
n = ?\
n < 400000000000000000000000000000\
\
Find n.\
\
\
Solution:\
\
The task is based on Elliptic Curve Cryptography, ECDLP and CRT. All the parameters are given at first. B has to be found using the equation, Y^2 = X^3 + AX + B(mod N).\
\
One can use SageMath, which is popular for Elliptic Curve Cryptography arithmetic.\
\
\pard\pardeftab720\sl320\partightenfactor0

\f2\fs27\fsmilli13600 \cf6 \cb7 sage: x, y = P[0], P[1]\
sage: b = (y^2 - x^3 - a*x) % N  #The ^ operator is exponentiation instead of XOR in Sage.\
sage: print(b)\
25255205054024371783896605039267101837972419055969636393425590261926131199030
\f0\fs48 \cf2 \cb3 \
\
This gives B. Then we formulate the finite curve. \
\

\f2\fs27\fsmilli13600 \cf6 \cb7 F = FiniteField(M)\
E = EllipticCurve(F,[A,B])\
P = E.point(P)\
Q = E.point(Q)
\fs32 \
\cb3 \

\f0\fs48 We then use the Pohlig-Hellman method and the Chinese Remainder Theorem for finding n.
\f2\fs32 \
\

\fs27\fsmilli13600 \cb7 sage: factor(E.order())\
2^2 * 3 * 5 * 7 * 137 * 593 * 24337 * 25589 * 3637793 * 5733569 * 106831998530025000830453 * 1975901744727669147699767
\fs32 \
\cb3 \

\fs27\fsmilli13600 \cb7 sage: primes = [4, 3, 5, 7, 137, 593, 24337, 25589, 3637793, 5733569, 106831998530025000830453, 1975901744727669147699767]\
sage: dlogs = []\
sage: for fac in primes:\
          t = int(P.order()) / int(fac)\
          dlog = discrete_log(t*Q,t*P,operation="+")\
          dlogs += [dlog]\
          print("factor: "+str(fac)+", Discrete Log: "+str(dlog)) #calculates discrete logarithm for each prime order\
\
factor: 4, dlog: 2\
factor: 3, dlog: 1\
factor: 5, dlog: 4\
factor: 7, dlog: 1\
factor: 137, dlog: 129\
factor: 593, dlog: 224\
factor: 24337, dlog: 5729\
factor: 25589, dlog: 13993\
factor: 3637793, dlog: 1730599\
factor: 5733569, dlog: 4590572
\fs32 \
\cb3 \

\f0\fs48 We don\'92t need the last two primes as the product of the primes until then returns a value which is more than the constraint given in the question(\cf2 n < 400000000000000000000000000000\cf6 ). So we then use the Chinese Remainder Theorem.\
\

\f2\fs27\fsmilli13600 \cb7 sage: l = crt(dlogs.primes[:-2])\
152977126447386808276536247114
\fs32 \
\cb3 \

\f0\fs48 Flag = \cb8 152977126447386808276536247114\
\
\
\
\
\
\
\
\
4. Title: Xmen OR the avengers\
\
the legion of doom is expecting an impending attack from a group of superheroes. they are not sure if it is the Xmen OR the avengers. they have received some information from a spy, a zip file containing the following files:\
\
info_crypt.txt\
info_clear.txt\
superheroes_group_info_crypt.txt\
\
help the legion of doom in decrypting the last file so they can prepare themselves and prevent their impending doom.\
\
\
Solution:\
\
The last file contains the flag and is encrypted using the Serpent algorithm in the ECB mode. These details are hidden in the key. The key for decrypting the last file can be obtained by XORing the first two files. This hint is provided in the title of the challenge. So first, XOR the first two files, obtain the key. Then, decrypt the last file (I used an online tool) using the key and hints provided in the key.\
\
Flag = \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 flag\{it's_the_justice_league_DC_for_life\}\
\
\
\
\
\
\
\
5. Title: Deeper into the wormhole\
\
Julius is stuck inside a wormhole, he receives this transmission from an unknown source on Earth:\
\
lbh@unir@gb@tb@s524(%2).4/4(%jbezubyrA@bayl@g(%.7),,9/55.#bire@gur@nyyZcbj%2&5,#/3-)#3%#ergAAAE\'c5\'d6FLHIL\'c9JRRORROKJGCKE*\
\
Decrypt it and find the flag.\
\
Solution:\
So all that\'92s given is a random string. With the hint provided in the first line of the challenge, we could try decoding the information using Caesar cipher to decode. We find some useful information on ROT13, \
\
\pard\pardeftab720\sl320\partightenfactor0
\cf9 \expnd0\expndtw0\kerning0
\CocoaLigature1 you@have@to@go@f524(%2).4/4(%wormholeN@only@t(%.7),,9/55.#over@the@allMpow%2&5,#/3-)#3%#retNNNR\'c5\'d6SYUVY\'c9WEEBEEBXWTPXR*\
\
This does have some useful information, but doesn\'92t get us anywhere. So we then hex dump it, so we can edit it byte by byte. We observe that most of the characters are small at first, and there at @ symbols between the words. In the ASCII code, the @ symbol + 20 gives the full stop, and that\'92s the difference between small case and upper case letters too. So we try doing that, but it doesn\'92t work for all sentences. We also notice that all the letters towards the end are uppercase, so we try alternating addition and subtraction of 20 over the whole hex dump. Add 20 on the first line, subtract 20 on the second line. Keep doing that and we end up with this:
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\fs48 \cf2 \CocoaLigature0 YOU HAVE TO GO FURTHER INTO THE WORMHOLE. ONLY THEN WILL YOU UNCOVER THE ALL-POWERFUL COSMIC SECRET...2ae39569c72ee8241653be06eb874082\
\
The last part of the message looks like an MD5 so we decrypt that using an online tool and end up with the string \'93chrsnln\'94, which is our flag.\
\
\pard\pardeftab720\sl320\partightenfactor0
\cf2 Flag = chrsnln  = 2ae39569c72ee8241653be06eb874082}